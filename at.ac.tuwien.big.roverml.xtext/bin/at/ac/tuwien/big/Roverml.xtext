grammar at.ac.tuwien.big.Roverml with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/roverml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RoverSystem returns RoverSystem:
	{RoverSystem}
	'roverSystem'
	'{'
		'rovers' 
		'{'
		 (rovers+=Rover)*
		 '}'		 
		 'roverPrograms' 
		'{'
		 (roverPrograms+=RoverProgram)*	
		'}'
	'}'	
	
;

NamedElement returns NamedElement:
	Rover | RoverProgram | Component | Command	
;

RoverProgram returns RoverProgram:
	{RoverProgram}
	'roverProgram' name=ID
	'{'
	'rover' rover=[Rover|QualifiedName]
	block=Block		
	'}'
	(',')?
;

Command returns Command:
	Move | Rotate | Wait | SetLightColor| Terminate | Repeat	
	
	incoming+=[Transition|QualifiedName] '>'
		outgoing+=[Transition|QualifiedName]	
;

Move returns Move:
	name=ID
	':'
	'move'
	distance=Length	
	'with'
	speed=Velocity	
	(',')?	
;

SetLightColor returns SetLightColor:
	name=ID
	':'
	'set'
	'lights'
	'('
		lights+=[Light|QualifiedName]
	')'
	'to'
	'color' color=Color		
		(',')?		
;

Rotate returns Rotate:
	name=ID
	':'
	'rotate'	
	angle=Angle
		(',')?	
;

Wait returns Wait:
	name=ID
	':'
	'wait'	
	duration=Time	
		(',')?	
;

Repeat returns Repeat:
	{Repeat}
	'repeat' count=EInt		
	'times'	
;

enum Color:	
	none = 'none' |
	red = 'red' |
	green = 'green' |
	blue = 'blue' |
	yellow = 'yellow' 
;

Rover returns Rover:
	{Rover}
	'rover' name=ID
	'{'		
		'components' 
		'{'
		(components+=Component)*
		'}'
	'}'
	(',')?
	
;

Block returns Block:
	Repeat | {Block} 
	'block'	
	(commands+=Repeat)?
	'{'
	('commands'
		'{'
		(commands+=Command)*
		'}'
	)?
	('transitions' 
		'{'
		(transitions+=Transition)*
		'}'
	)?
	'}'
;

Transition returns Transition:
	(TriggeredTransition)?
	source=[Command|QualifiedName] '>'
		target=[Command|QualifiedName]
		(',')?
;

TriggeredTransition returns TriggeredTransition:
	'if'
	DistanceSensorTrigger | GpsTrigger | CompassTrigger	
;

GPS returns GPS:
	{GPS}
	'gps' name=ID
	(',')?
;

DistanceSensor returns DistanceSensor:
	{DistanceSensor}
	'distanceSensor' name=ID
	('('	
	('kind' kind=EString)?	
	')')?
	(',')?
;

Compass returns Compass:
	{Compass}
	'compass' name=ID
	('('	
	('kind' kind=EString)?	
	')')?
	(',')?
;

SingleQuantity returns SingleQuantity:
	Time | Velocity | Angle | Length	
	//'{'
	//'value' 
	//value=EFloat
	//'}'
;

enum TimeUnit:	
	ns = 'ns' |
	ms = 'ms' |
	s = 's' |
	min = 'min' |
	h = 'h'
;

Time returns Time:
	//'timeUnit' 
	value=EFloat
	timeUnit=TimeUnit
;

Angle returns Angle:
	//'angleUnit'
	value=EFloat
	angleUnit=AngleUnit
;

Velocity returns Velocity:
	//'velocityUnit' 
	value=EFloat
	velocityUnit=VelocityUnit
;

Light returns Light:
	{Light}
	'light' name=ID 
	('('
	
	('kind' kind=EString)?
	
	')')?
	(',')?
;

enum AngleUnit:
	radian = 'radian' |
	degree = 'degree'
;

enum VelocityUnit:
	mm_per_s = 'mm_per_s' |
	cm_per_s = 'cm_per_s'
;

Length returns Length:
	value=EFloat 
	lengthUnit=LengthUnit
;

enum LengthUnit:
	mm = 'mm' |
	cm = 'cm' |
	m = 'm'
;

enum ComparisonOperator:
	smaller = 'smaller' |
	equals = 'equals' |
	greater = 'greater' |
	unequal = 'unequal'
;

Sensor returns Sensor:
	GPS | DistanceSensor | Compass	
	//'{'
	(lastSensedValue=Quantity)?
	//'}'
;

Motor returns Motor:
	{Motor}
	'motor' name=ID
	 (',')?
;

Terminate returns Terminate:
	{Terminate}
	'terminate'
;

Component returns Component:
	Actuator | Sensor
	//'component'
	/*('('
	
	('kind' kind=EString)?
	
	'),')?
	*/
	
;

Actuator returns Actuator:
	Light | Motor	
	//(',')?	
;

DistanceSensorTrigger returns DistanceSensorTrigger:
	{DistanceSensorTrigger}
	sensor=[DistanceSensor|QualifiedName]
	operator=ComparisonOperator
	comparisonValue=Length
	':'
;

GpsTrigger returns GpsTrigger:
	{GpsTrigger}
	sensor=[GPS|QualifiedName]
	operator=ComparisonOperator
	comparisonValue=Position
	':'
;

CompassTrigger returns CompassTrigger:
	{CompassTrigger}
	sensor=[Compass|QualifiedName]
	operator=ComparisonOperator
	comparisonValue=Angle
	':'
;

Quantity returns Quantity:
	Position | SingleQuantity	
	//'quantity'
;

Position returns Position:
	{Position}
	'position'
	'{'
	('x' x=Length)
	('y' y=Length)
	'}'
;

QualifiedName returns ecore::EString:
	ID (=> '.' ID)*;

EString returns ecore::EString:
	STRING | ID;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;
