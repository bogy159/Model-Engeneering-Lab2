grammar at.ac.tuwien.big.Roverml with org.eclipse.xtext.common.Terminals

import "http://www.big.tuwien.ac.at/roverml"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

NamedElement returns NamedElement:
	Rover | RoverProgram | Component | Command
;

RoverProgram returns RoverProgram:
	{RoverProgram}
	'roverProgram'
	block=Block		
;

Command returns Command:
	Move | Rotate | Wait | SetLightColor| Terminate | Repeat	
	'command'
	incoming+=[Transition|QualifiedName] '>'
		outgoing+=[Transition|QualifiedName]		
;

Move returns Move:
	'move'
	'{'
		speed=Velocity
		distance=Length		
	'}'
;

SetLightColor returns SetLightColor:
	'setLightColor'
	'{'
		'color' color=Color
		lights+=[Light|QualifiedName]
	'}'
;

Rotate returns Rotate:
	'rotate'
	'{'
	angle=Angle
	'}'
;

Wait returns Wait:
	'wait'
	'{'
	duration=Time
	'}'
;

Repeat returns Repeat:
	{Repeat}
	'repeat'
	'{'
		'count' count=EInt	
	'}'
;

enum Color:	
	none = 'None' | none = '0' |
	red = 'move' | red = '1' |
	green = 'Green' | green = '2' |
	blue = 'Blue' | blue = '3' |
	yellow = 'Yellow' | yellow = '4' 
;

Rover returns Rover:
	{Rover}
	'rover'
	(components+=Component)*
;

Block returns Block:
	Repeat | {Block}
	'block'	
	'{'
	(commands+=Command)*
	(transitions+=Transition)*
	'}'
;

Transition returns Transition:
	TriggeredTransition | {Transition}
	'transition'
	source=[Command|QualifiedName] '>'
		target=[Command|QualifiedName]
;

TriggeredTransition returns TriggeredTransition:
	DistanceSensorTrigger | GpsTrigger | CompassTrigger
	'triggeredTransition'
	('sensor' sensor=[Sensor|QualifiedName])?
	'operator' operator=ComparisonOperator
	('comparisonValue' comparisonValue=Quantity)?
;

GPS returns GPS:
	{GPS}
	'gps'
;

DistanceSensor returns DistanceSensor:
	{DistanceSensor}
	'DistanceSensor'
;

Compass returns Sensor:
	{Compass}
	'Compass'
;

SingleQuantity returns SingleQuantity:
	Time | Velocity | Angle | Length
	'SingleQuantity'
	'{'
	'value' value=EFloat
	'}'
;

enum TimeUnit:	
	ns = 'Ns' | ns = '0' |
	ms = 'Ms' | ms = '1' |
	s = 'S' | s = '2' |
	min = 'Min' | min = '3' |
	h = 'H' | h = '4' 
;

Time returns Time:
	'timeUnit' timeUnit=TimeUnit
;

Angle returns Angle:
	'angleUnit'angleUnit=AngleUnit
;

Velocity returns Velocity:
	'velocityUnit' velocityUnit=VelocityUnit
;

Light returns Light:
	{Light}
	'light'
;

enum AngleUnit:
	radian = 'Radian' | radian = '0' |
	degree = 'Degree' | degree = '1' 
;

enum VelocityUnit:
	mm_per_s = 'Mm_per_s' | mm_per_s = '0' |
	cm_per_s = 'Cm_per_s' | cm_per_s = '1' 
;

Length returns Length:
	'length'
	'{'
	'lengthUnit' lengthUnit=LengthUnit
	'}'
;

enum LengthUnit:
	mm = 'Mm' | mm = '0' |
	cm = 'Cm' | cm = '1' |
	m = 'M' | m = '2' 
;

enum ComparisonOperator:
	smaller = 'Smaller' | smaller = '0' |
	equals = 'Equals' | equals = '1' |
	greater = 'Greater' | greater = '2' |
	unequal = 'Unequal' | unequal = '3' 
;

Sensor returns Sensor:
	GPS | DistanceSensor | Compass
	'sensor'
	'{'
	lastSensedValue=Quantity
	'}'
;

Motor returns Motor:
	{Motor}
	'motor'
;

Terminate returns Terminate:
	{Terminate}
	'terminate'
;

Component returns Component:
	Actuator | Sensor
	'component'
	'{'
	'kind' kind=EString
	'}'
;

Actuator returns Actuator:
	Light | Motor	
	'actuator'
;

RoverSystem returns RoverSystem:
	{RoverSystem}
	'roverSystem'
	'{'
		(rovers+=Rover)*
		(roverPrograms+=RoverProgram)*	
	'}'	
;

DistanceSensorTrigger returns DistanceSensorTrigger:
	{DistanceSensorTrigger}
	'DistanceSensorTrigger'
;

GpsTrigger returns GpsTrigger:
	{GpsTrigger}
	'GpsTrigger'
;

CompassTrigger returns CompassTrigger:
	{CompassTrigger}
	'CompassTrigger'
;

Quantity returns Quantity:
	Position | SingleQuantity	
	'quantity'
;

Position returns Position:
	{Position}
	'position'
	'{'
	('x' x=Length)
	('y' y=Length)
	'}'
;

QualifiedName returns ecore::EString:
	ID (=> '.' ID)*;

EString returns ecore::EString:
	STRING | ID;

EFloat returns ecore::EFloat:
	'-'? INT? '.' INT (('E' | 'e') '-'? INT)?;

EInt returns ecore::EInt:
	'-'? INT;
