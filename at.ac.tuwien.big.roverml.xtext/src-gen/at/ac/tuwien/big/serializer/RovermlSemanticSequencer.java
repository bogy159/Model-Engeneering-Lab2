/*
 * generated by Xtext 2.14.0
 */
package at.ac.tuwien.big.serializer;

import at.ac.tuwien.big.roverml.Angle;
import at.ac.tuwien.big.roverml.Block;
import at.ac.tuwien.big.roverml.Compass;
import at.ac.tuwien.big.roverml.CompassTrigger;
import at.ac.tuwien.big.roverml.DistanceSensor;
import at.ac.tuwien.big.roverml.DistanceSensorTrigger;
import at.ac.tuwien.big.roverml.GPS;
import at.ac.tuwien.big.roverml.GpsTrigger;
import at.ac.tuwien.big.roverml.Length;
import at.ac.tuwien.big.roverml.Light;
import at.ac.tuwien.big.roverml.Motor;
import at.ac.tuwien.big.roverml.Move;
import at.ac.tuwien.big.roverml.Position;
import at.ac.tuwien.big.roverml.Repeat;
import at.ac.tuwien.big.roverml.Rotate;
import at.ac.tuwien.big.roverml.Rover;
import at.ac.tuwien.big.roverml.RoverMLPackage;
import at.ac.tuwien.big.roverml.RoverProgram;
import at.ac.tuwien.big.roverml.RoverSystem;
import at.ac.tuwien.big.roverml.SetLightColor;
import at.ac.tuwien.big.roverml.Terminate;
import at.ac.tuwien.big.roverml.Time;
import at.ac.tuwien.big.roverml.Transition;
import at.ac.tuwien.big.roverml.Velocity;
import at.ac.tuwien.big.roverml.Wait;
import at.ac.tuwien.big.services.RovermlGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class RovermlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RovermlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RoverMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RoverMLPackage.ANGLE:
				sequence_Angle(context, (Angle) semanticObject); 
				return; 
			case RoverMLPackage.BLOCK:
				sequence_Block(context, (Block) semanticObject); 
				return; 
			case RoverMLPackage.COMPASS:
				if (rule == grammarAccess.getCompassRule()) {
					sequence_Compass(context, (Compass) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getNamedElementRule()
						|| rule == grammarAccess.getSensorRule()
						|| rule == grammarAccess.getComponentRule()) {
					sequence_Compass_Sensor(context, (Compass) semanticObject); 
					return; 
				}
				else break;
			case RoverMLPackage.COMPASS_TRIGGER:
				if (rule == grammarAccess.getTriggeredTransitionRule()
						|| rule == grammarAccess.getCompassTriggerRule()) {
					sequence_CompassTrigger(context, (CompassTrigger) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionRule()) {
					sequence_CompassTrigger_Transition(context, (CompassTrigger) semanticObject); 
					return; 
				}
				else break;
			case RoverMLPackage.DISTANCE_SENSOR:
				sequence_DistanceSensor(context, (DistanceSensor) semanticObject); 
				return; 
			case RoverMLPackage.DISTANCE_SENSOR_TRIGGER:
				if (rule == grammarAccess.getTriggeredTransitionRule()
						|| rule == grammarAccess.getDistanceSensorTriggerRule()) {
					sequence_DistanceSensorTrigger(context, (DistanceSensorTrigger) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionRule()) {
					sequence_DistanceSensorTrigger_Transition(context, (DistanceSensorTrigger) semanticObject); 
					return; 
				}
				else break;
			case RoverMLPackage.GPS:
				sequence_GPS(context, (GPS) semanticObject); 
				return; 
			case RoverMLPackage.GPS_TRIGGER:
				if (rule == grammarAccess.getTriggeredTransitionRule()
						|| rule == grammarAccess.getGpsTriggerRule()) {
					sequence_GpsTrigger(context, (GpsTrigger) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getTransitionRule()) {
					sequence_GpsTrigger_Transition(context, (GpsTrigger) semanticObject); 
					return; 
				}
				else break;
			case RoverMLPackage.LENGTH:
				sequence_Length(context, (Length) semanticObject); 
				return; 
			case RoverMLPackage.LIGHT:
				sequence_Light(context, (Light) semanticObject); 
				return; 
			case RoverMLPackage.MOTOR:
				sequence_Motor(context, (Motor) semanticObject); 
				return; 
			case RoverMLPackage.MOVE:
				sequence_Move(context, (Move) semanticObject); 
				return; 
			case RoverMLPackage.POSITION:
				sequence_Position(context, (Position) semanticObject); 
				return; 
			case RoverMLPackage.REPEAT:
				if (rule == grammarAccess.getNamedElementRule()
						|| rule == grammarAccess.getCommandRule()) {
					sequence_Command_Repeat(context, (Repeat) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getRepeatRule()
						|| rule == grammarAccess.getBlockRule()) {
					sequence_Repeat(context, (Repeat) semanticObject); 
					return; 
				}
				else break;
			case RoverMLPackage.ROTATE:
				sequence_Rotate(context, (Rotate) semanticObject); 
				return; 
			case RoverMLPackage.ROVER:
				sequence_Rover(context, (Rover) semanticObject); 
				return; 
			case RoverMLPackage.ROVER_PROGRAM:
				sequence_RoverProgram(context, (RoverProgram) semanticObject); 
				return; 
			case RoverMLPackage.ROVER_SYSTEM:
				sequence_RoverSystem(context, (RoverSystem) semanticObject); 
				return; 
			case RoverMLPackage.SET_LIGHT_COLOR:
				sequence_SetLightColor(context, (SetLightColor) semanticObject); 
				return; 
			case RoverMLPackage.TERMINATE:
				sequence_Terminate(context, (Terminate) semanticObject); 
				return; 
			case RoverMLPackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			case RoverMLPackage.TRANSITION:
				sequence_Transition(context, (Transition) semanticObject); 
				return; 
			case RoverMLPackage.VELOCITY:
				sequence_Velocity(context, (Velocity) semanticObject); 
				return; 
			case RoverMLPackage.WAIT:
				sequence_Wait(context, (Wait) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     SingleQuantity returns Angle
	 *     Angle returns Angle
	 *     Quantity returns Angle
	 *
	 * Constraint:
	 *     (value=EFloat angleUnit=AngleUnit)
	 */
	protected void sequence_Angle(ISerializationContext context, Angle semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.ANGLE__ANGLE_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.ANGLE__ANGLE_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAngleAccess().getValueEFloatParserRuleCall_0_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getAngleAccess().getAngleUnitAngleUnitEnumRuleCall_1_0(), semanticObject.getAngleUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Block returns Block
	 *
	 * Constraint:
	 *     (commands+=Repeat? commands+=Command* transitions+=Transition*)
	 */
	protected void sequence_Block(ISerializationContext context, Block semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Repeat
	 *     Command returns Repeat
	 *
	 * Constraint:
	 *     (count=EInt incoming+=[Transition|QualifiedName] outgoing+=[Transition|QualifiedName])
	 */
	protected void sequence_Command_Repeat(ISerializationContext context, Repeat semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggeredTransition returns CompassTrigger
	 *     CompassTrigger returns CompassTrigger
	 *
	 * Constraint:
	 *     (sensor=[Compass|QualifiedName] operator=ComparisonOperator comparisonValue=Angle)
	 */
	protected void sequence_CompassTrigger(ISerializationContext context, CompassTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompassTriggerAccess().getSensorCompassQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getCompassTriggerAccess().getOperatorComparisonOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getCompassTriggerAccess().getComparisonValueAngleParserRuleCall_3_0(), semanticObject.getComparisonValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns CompassTrigger
	 *
	 * Constraint:
	 *     (sensor=[Compass|QualifiedName] operator=ComparisonOperator comparisonValue=Angle source=[Command|QualifiedName] target=[Command|QualifiedName])
	 */
	protected void sequence_CompassTrigger_Transition(ISerializationContext context, CompassTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCompassTriggerAccess().getSensorCompassQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getCompassTriggerAccess().getOperatorComparisonOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getCompassTriggerAccess().getComparisonValueAngleParserRuleCall_3_0(), semanticObject.getComparisonValue());
		feeder.accept(grammarAccess.getTransitionAccess().getSourceCommandQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__SOURCE, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetCommandQualifiedNameParserRuleCall_3_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Compass returns Compass
	 *
	 * Constraint:
	 *     (name=ID kind=EString?)
	 */
	protected void sequence_Compass(ISerializationContext context, Compass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Compass
	 *     Sensor returns Compass
	 *     Component returns Compass
	 *
	 * Constraint:
	 *     (name=ID kind=EString? lastSensedValue=Quantity?)
	 */
	protected void sequence_Compass_Sensor(ISerializationContext context, Compass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TriggeredTransition returns DistanceSensorTrigger
	 *     DistanceSensorTrigger returns DistanceSensorTrigger
	 *
	 * Constraint:
	 *     (sensor=[DistanceSensor|QualifiedName] operator=ComparisonOperator comparisonValue=Length)
	 */
	protected void sequence_DistanceSensorTrigger(ISerializationContext context, DistanceSensorTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDistanceSensorTriggerAccess().getSensorDistanceSensorQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getDistanceSensorTriggerAccess().getOperatorComparisonOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getDistanceSensorTriggerAccess().getComparisonValueLengthParserRuleCall_3_0(), semanticObject.getComparisonValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns DistanceSensorTrigger
	 *
	 * Constraint:
	 *     (
	 *         sensor=[DistanceSensor|QualifiedName] 
	 *         operator=ComparisonOperator 
	 *         comparisonValue=Length 
	 *         source=[Command|QualifiedName] 
	 *         target=[Command|QualifiedName]
	 *     )
	 */
	protected void sequence_DistanceSensorTrigger_Transition(ISerializationContext context, DistanceSensorTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDistanceSensorTriggerAccess().getSensorDistanceSensorQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getDistanceSensorTriggerAccess().getOperatorComparisonOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getDistanceSensorTriggerAccess().getComparisonValueLengthParserRuleCall_3_0(), semanticObject.getComparisonValue());
		feeder.accept(grammarAccess.getTransitionAccess().getSourceCommandQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__SOURCE, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetCommandQualifiedNameParserRuleCall_3_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns DistanceSensor
	 *     DistanceSensor returns DistanceSensor
	 *     Sensor returns DistanceSensor
	 *     Component returns DistanceSensor
	 *
	 * Constraint:
	 *     (name=ID kind=EString?)
	 */
	protected void sequence_DistanceSensor(ISerializationContext context, DistanceSensor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns GPS
	 *     GPS returns GPS
	 *     Sensor returns GPS
	 *     Component returns GPS
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_GPS(ISerializationContext context, GPS semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGPSAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TriggeredTransition returns GpsTrigger
	 *     GpsTrigger returns GpsTrigger
	 *
	 * Constraint:
	 *     (sensor=[GPS|QualifiedName] operator=ComparisonOperator comparisonValue=Position)
	 */
	protected void sequence_GpsTrigger(ISerializationContext context, GpsTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGpsTriggerAccess().getSensorGPSQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getGpsTriggerAccess().getOperatorComparisonOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getGpsTriggerAccess().getComparisonValuePositionParserRuleCall_3_0(), semanticObject.getComparisonValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns GpsTrigger
	 *
	 * Constraint:
	 *     (sensor=[GPS|QualifiedName] operator=ComparisonOperator comparisonValue=Position source=[Command|QualifiedName] target=[Command|QualifiedName])
	 */
	protected void sequence_GpsTrigger_Transition(ISerializationContext context, GpsTrigger semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRIGGERED_TRANSITION__COMPARISON_VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGpsTriggerAccess().getSensorGPSQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRIGGERED_TRANSITION__SENSOR, false));
		feeder.accept(grammarAccess.getGpsTriggerAccess().getOperatorComparisonOperatorEnumRuleCall_2_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getGpsTriggerAccess().getComparisonValuePositionParserRuleCall_3_0(), semanticObject.getComparisonValue());
		feeder.accept(grammarAccess.getTransitionAccess().getSourceCommandQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__SOURCE, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetCommandQualifiedNameParserRuleCall_3_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SingleQuantity returns Length
	 *     Length returns Length
	 *     Quantity returns Length
	 *
	 * Constraint:
	 *     (value=EFloat lengthUnit=LengthUnit)
	 */
	protected void sequence_Length(ISerializationContext context, Length semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.LENGTH__LENGTH_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.LENGTH__LENGTH_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLengthAccess().getValueEFloatParserRuleCall_0_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getLengthAccess().getLengthUnitLengthUnitEnumRuleCall_1_0(), semanticObject.getLengthUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Light
	 *     Light returns Light
	 *     Component returns Light
	 *     Actuator returns Light
	 *
	 * Constraint:
	 *     (name=ID kind=EString?)
	 */
	protected void sequence_Light(ISerializationContext context, Light semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Motor
	 *     Motor returns Motor
	 *     Component returns Motor
	 *     Actuator returns Motor
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_Motor(ISerializationContext context, Motor semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMotorAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Move
	 *     Command returns Move
	 *     Move returns Move
	 *
	 * Constraint:
	 *     (name=ID distance=Length speed=Velocity)
	 */
	protected void sequence_Move(ISerializationContext context, Move semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.MOVE__DISTANCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.MOVE__DISTANCE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.MOVE__SPEED) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.MOVE__SPEED));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getMoveAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getMoveAccess().getDistanceLengthParserRuleCall_3_0(), semanticObject.getDistance());
		feeder.accept(grammarAccess.getMoveAccess().getSpeedVelocityParserRuleCall_5_0(), semanticObject.getSpeed());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Quantity returns Position
	 *     Position returns Position
	 *
	 * Constraint:
	 *     (x=Length y=Length)
	 */
	protected void sequence_Position(ISerializationContext context, Position semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.POSITION__X) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.POSITION__X));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.POSITION__Y) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.POSITION__Y));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPositionAccess().getXLengthParserRuleCall_3_1_0(), semanticObject.getX());
		feeder.accept(grammarAccess.getPositionAccess().getYLengthParserRuleCall_4_1_0(), semanticObject.getY());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Repeat returns Repeat
	 *     Block returns Repeat
	 *
	 * Constraint:
	 *     count=EInt
	 */
	protected void sequence_Repeat(ISerializationContext context, Repeat semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.REPEAT__COUNT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.REPEAT__COUNT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRepeatAccess().getCountEIntParserRuleCall_2_0(), semanticObject.getCount());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Rotate
	 *     Command returns Rotate
	 *     Rotate returns Rotate
	 *
	 * Constraint:
	 *     (name=ID angle=Angle)
	 */
	protected void sequence_Rotate(ISerializationContext context, Rotate semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.ROTATE__ANGLE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.ROTATE__ANGLE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRotateAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRotateAccess().getAngleAngleParserRuleCall_3_0(), semanticObject.getAngle());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns RoverProgram
	 *     RoverProgram returns RoverProgram
	 *
	 * Constraint:
	 *     (name=ID rover=[Rover|QualifiedName] block=Block)
	 */
	protected void sequence_RoverProgram(ISerializationContext context, RoverProgram semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.ROVER_PROGRAM__ROVER) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.ROVER_PROGRAM__ROVER));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.ROVER_PROGRAM__BLOCK) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.ROVER_PROGRAM__BLOCK));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getRoverProgramAccess().getNameIDTerminalRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getRoverProgramAccess().getRoverRoverQualifiedNameParserRuleCall_5_0_1(), semanticObject.eGet(RoverMLPackage.Literals.ROVER_PROGRAM__ROVER, false));
		feeder.accept(grammarAccess.getRoverProgramAccess().getBlockBlockParserRuleCall_6_0(), semanticObject.getBlock());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RoverSystem returns RoverSystem
	 *
	 * Constraint:
	 *     (rovers+=Rover* roverPrograms+=RoverProgram*)
	 */
	protected void sequence_RoverSystem(ISerializationContext context, RoverSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Rover
	 *     Rover returns Rover
	 *
	 * Constraint:
	 *     (name=ID components+=Component*)
	 */
	protected void sequence_Rover(ISerializationContext context, Rover semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns SetLightColor
	 *     Command returns SetLightColor
	 *     SetLightColor returns SetLightColor
	 *
	 * Constraint:
	 *     (name=ID lights+=[Light|QualifiedName] color=Color)
	 */
	protected void sequence_SetLightColor(ISerializationContext context, SetLightColor semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Terminate
	 *     Command returns Terminate
	 *     Terminate returns Terminate
	 *
	 * Constraint:
	 *     {Terminate}
	 */
	protected void sequence_Terminate(ISerializationContext context, Terminate semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SingleQuantity returns Time
	 *     Time returns Time
	 *     Quantity returns Time
	 *
	 * Constraint:
	 *     (value=EFloat timeUnit=TimeUnit)
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TIME__TIME_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TIME__TIME_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimeAccess().getValueEFloatParserRuleCall_0_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getTimeAccess().getTimeUnitTimeUnitEnumRuleCall_1_0(), semanticObject.getTimeUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Transition returns Transition
	 *
	 * Constraint:
	 *     (source=[Command|QualifiedName] target=[Command|QualifiedName])
	 */
	protected void sequence_Transition(ISerializationContext context, Transition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.TRANSITION__TARGET));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTransitionAccess().getSourceCommandQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__SOURCE, false));
		feeder.accept(grammarAccess.getTransitionAccess().getTargetCommandQualifiedNameParserRuleCall_3_0_1(), semanticObject.eGet(RoverMLPackage.Literals.TRANSITION__TARGET, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     SingleQuantity returns Velocity
	 *     Velocity returns Velocity
	 *     Quantity returns Velocity
	 *
	 * Constraint:
	 *     (value=EFloat velocityUnit=VelocityUnit)
	 */
	protected void sequence_Velocity(ISerializationContext context, Velocity semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.SINGLE_QUANTITY__VALUE));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.VELOCITY__VELOCITY_UNIT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.VELOCITY__VELOCITY_UNIT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getVelocityAccess().getValueEFloatParserRuleCall_0_0(), semanticObject.getValue());
		feeder.accept(grammarAccess.getVelocityAccess().getVelocityUnitVelocityUnitEnumRuleCall_1_0(), semanticObject.getVelocityUnit());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     NamedElement returns Wait
	 *     Command returns Wait
	 *     Wait returns Wait
	 *
	 * Constraint:
	 *     (name=ID duration=Time)
	 */
	protected void sequence_Wait(ISerializationContext context, Wait semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, RoverMLPackage.Literals.WAIT__DURATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, RoverMLPackage.Literals.WAIT__DURATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWaitAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWaitAccess().getDurationTimeParserRuleCall_3_0(), semanticObject.getDuration());
		feeder.finish();
	}
	
	
}
