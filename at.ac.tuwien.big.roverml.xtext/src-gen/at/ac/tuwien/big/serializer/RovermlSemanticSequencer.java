/*
 * generated by Xtext 2.14.0
 */
package at.ac.tuwien.big.serializer;

import at.ac.tuwien.big.roverml.RoverMLPackage;
import at.ac.tuwien.big.roverml.RoverSystem;
import at.ac.tuwien.big.services.RovermlGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class RovermlSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private RovermlGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == RoverMLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case RoverMLPackage.ROVER_SYSTEM:
				sequence_RoverSystem(context, (RoverSystem) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     RoverSystem returns RoverSystem
	 *
	 * Constraint:
	 *     {RoverSystem}
	 */
	protected void sequence_RoverSystem(ISerializationContext context, RoverSystem semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
