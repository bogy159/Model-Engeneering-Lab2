/*
 * generated by Xtext 2.14.0
 */
package at.ac.tuwien.big.serializer;

import at.ac.tuwien.big.services.RovermlGrammarAccess;
import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class RovermlSyntacticSequencer extends AbstractSyntacticSequencer {

	protected RovermlGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Compass_CommaKeyword_3_q;
	protected AbstractElementAlias match_Component_CommaKeyword_1_2_q;
	protected AbstractElementAlias match_Component___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__q;
	protected AbstractElementAlias match_DistanceSensor_CommaKeyword_3_q;
	protected AbstractElementAlias match_GPS_CommaKeyword_3_q;
	protected AbstractElementAlias match_Light_CommaKeyword_3_q;
	protected AbstractElementAlias match_Motor_CommaKeyword_3_q;
	protected AbstractElementAlias match_Rover_CommaKeyword_9_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (RovermlGrammarAccess) access;
		match_Compass_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getCompassAccess().getCommaKeyword_3());
		match_Component_CommaKeyword_1_2_q = new TokenAlias(false, true, grammarAccess.getComponentAccess().getCommaKeyword_1_2());
		match_Component___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__q = new GroupAlias(false, true, new TokenAlias(false, false, grammarAccess.getComponentAccess().getLeftParenthesisKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getComponentAccess().getRightParenthesisKeyword_1_1_2()));
		match_DistanceSensor_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getDistanceSensorAccess().getCommaKeyword_3());
		match_GPS_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getGPSAccess().getCommaKeyword_3());
		match_Light_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getLightAccess().getCommaKeyword_3());
		match_Motor_CommaKeyword_3_q = new TokenAlias(false, true, grammarAccess.getMotorAccess().getCommaKeyword_3());
		match_Rover_CommaKeyword_9_q = new TokenAlias(false, true, grammarAccess.getRoverAccess().getCommaKeyword_9());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		return "";
	}
	
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Compass_CommaKeyword_3_q.equals(syntax))
				emit_Compass_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Component_CommaKeyword_1_2_q.equals(syntax))
				emit_Component_CommaKeyword_1_2_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Component___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__q.equals(syntax))
				emit_Component___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_DistanceSensor_CommaKeyword_3_q.equals(syntax))
				emit_DistanceSensor_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_GPS_CommaKeyword_3_q.equals(syntax))
				emit_GPS_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Light_CommaKeyword_3_q.equals(syntax))
				emit_Light_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Motor_CommaKeyword_3_q.equals(syntax))
				emit_Motor_CommaKeyword_3_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Rover_CommaKeyword_9_q.equals(syntax))
				emit_Rover_CommaKeyword_9_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '{' lastSensedValue=Quantity
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_Compass_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     kind=EString ')' (ambiguity) (rule end)
	 *     lastSensedValue=Quantity '}' ('(' ')')? (ambiguity) (rule end)
	 *     name=ID ','? ('(' ')')? (ambiguity) (rule end)
	 */
	protected void emit_Component_CommaKeyword_1_2_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('(' ')')?
	 *
	 * This ambiguous syntax occurs at:
	 *     lastSensedValue=Quantity '}' (ambiguity) ','? (rule end)
	 *     name=ID ','? (ambiguity) ','? (rule end)
	 */
	protected void emit_Component___LeftParenthesisKeyword_1_1_0_RightParenthesisKeyword_1_1_2__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '(' 'kind' kind=EString
	 *     name=ID (ambiguity) ('(' ')')? ','? (rule end)
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_DistanceSensor_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) '(' 'kind' kind=EString
	 *     name=ID (ambiguity) ('(' ')')? ','? (rule end)
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_GPS_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_Light_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     name=ID (ambiguity) (rule end)
	 */
	protected void emit_Motor_CommaKeyword_3_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ','?
	 *
	 * This ambiguous syntax occurs at:
	 *     components+=Component '}' '}' (ambiguity) (rule end)
	 *     name=ID '{' 'components' '{' '}' '}' (ambiguity) (rule end)
	 */
	protected void emit_Rover_CommaKeyword_9_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
