/*
 * generated by Xtext 2.14.0
 */
package at.ac.tuwien.big.scoping;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;

import at.ac.tuwien.big.roverml.Actuator;
import at.ac.tuwien.big.roverml.Block;
import at.ac.tuwien.big.roverml.Command;
import at.ac.tuwien.big.roverml.Component;
import at.ac.tuwien.big.roverml.Light;
import at.ac.tuwien.big.roverml.Rover;
import at.ac.tuwien.big.roverml.RoverProgram;
import at.ac.tuwien.big.roverml.RoverSystem;
import at.ac.tuwien.big.roverml.SetLightColor;
import at.ac.tuwien.big.roverml.Transition;

/**
 * This class contains custom scoping description.
 * 
 * See
 * https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
public class RovermlScopeProvider extends AbstractDeclarativeScopeProvider {

	/**
	 * TODO: Scoping for the referenced light of the SetLightColor command
	 * 
	 * It is possible to define multiple rovers (and multiple programs) in a rover
	 * environment. A rover program references exactly one rover. If the
	 * SetLightColor command is used, the suggested lights should only be of the
	 * rover referenced in the program defining the command.
	 */
	
	IScope scope_Light(SetLightColor command, EReference reference) {
		RoverProgram program = getProgram(command);
		Rover rover = program.getRover();
		return Scopes.scopeFor(getAllowedLights(rover));
		
	}
	
	private List<Light> getAllowedLights(Rover rover) {
		EList<Component> components = rover.getComponents();
		ArrayList<Light> lights = new ArrayList<>();
		for(Component comp : components){
			if(comp instanceof Light) {
				lights.add((Light) comp);
			}
		}
		return lights;
	}

	/**
	 * TODO: Scoping for the source of a transition
	 * 
	 * The suggested commands (source and target) for transitions should only be the
	 * ones defined in the same rover program and the same block as the transitions.
	 * 
	 */

	/**
	 * TODO: Scoping for the target of a transition
	 * 
	 * The suggested commands (source and target) for transitions should only be the
	 * ones defined in the same rover program and the same block as the transitions.
	 */
	
	IScope scope_Command(Transition transition, EReference reference) {
		Block block = getBlock(transition);
		return Scopes.scopeFor(block.getCommands());
	}

	/**
	 * GIVEN: Convenience function to retrieve the block of a transition.
	 * 
	 * @param transition Transition for which the block should be retrieved.
	 * @return The block containing the transition.
	 */
	private Block getBlock(Transition transition) {
		return (Block) transition.eContainer();
	}
	
	private at.ac.tuwien.big.roverml.RoverProgram getProgram(EObject eObject) {
		if (eObject instanceof at.ac.tuwien.big.roverml.RoverProgram) {
			return (at.ac.tuwien.big.roverml.RoverProgram) eObject;
		} else if (eObject.eContainer() != null) {
			return getProgram(eObject.eContainer());
		}
		return null;
	}

}
